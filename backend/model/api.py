# -----------------------------
# üîπ Import Python libraries
# -----------------------------
from flask import Flask, request, jsonify         # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á web API
from flask_cors import CORS                       # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î CORS ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å front-end ‡πÑ‡∏î‡πâ
from pydantic import BaseModel, Field, ValidationError  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• input
from werkzeug.exceptions import BadRequest        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á request
import joblib                                     # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà train ‡πÑ‡∏ß‡πâ
import numpy as np                                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö array

# -----------------------------
# üîπ Configuration
# -----------------------------
app = Flask(__name__) # ‡∏™‡∏£‡πâ‡∏≤‡∏á Flask app ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á API
CORS(app)  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô CORS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ front-end ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÑ‡∏î‡πâ
MODEL_PATH = "house_price_model.pkl" # ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà train ‡πÑ‡∏ß‡πâ
 
# -----------------------------
# üîπ Load ML model at startup
# -----------------------------
try:
    model = joblib.load(MODEL_PATH)   # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà train ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
except Exception as e:
    raise RuntimeError(f"Failed to load model: {e}")  # ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 
# -----------------------------
# üîπ Define input schema to validate inputs
# -----------------------------
class HouseFeatures(BaseModel):
    age: int = Field(..., ge=0, le=120)          # ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ö‡πâ‡∏≤‡∏ô (0-120 ‡∏õ‡∏µ)
    distance: int = Field(..., ge=0, le=10000)    # ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ñ‡∏∂‡∏á MRT (‡πÄ‡∏°‡∏ï‡∏£)
    minimart: int = Field(..., ge=0, le=20)       # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
 
# -----------------------------
# üîπ Hello World API
# -----------------------------
@app.route("/api/hello", methods=["GET"])
def hello_world():
    return jsonify({"message": "hello world"})
 
# -----------------------------
# üîπ Hourse Price Prediction API
# -----------------------------
@app.route("/api/house", methods=["POST"])
def predict_house_price():
    try:
        # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏à‡∏≤‡∏Å client
        data = request.get_json()
 
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Pydantic
        features = HouseFeatures(**data)
 
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ numpy array ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•
        x = np.array([[features.age, features.distance, features.minimart]])
 
        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
        prediction = model.predict(x)
 
        # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ JSON
        return jsonify({
            "status": True,
            "price": np.round(float(prediction[0]*1000), 2),  # ‡∏Ñ‡∏π‡∏ì 1000 ‡πÄ‡∏õ‡πá‡∏ô ‡∏ö‡∏≤‡∏ó
            "currency": "‡∏ö‡∏≤‡∏ó/‡∏ï‡∏£.‡∏°."
        })
 
    except ValidationError as ve:
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏£‡∏ì‡∏µ input ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô -1)
        errors = {}
        print(ve.errors())
        for error in ve.errors():
            field = error['loc'][0]
            msg = error['msg']                        
            errors.setdefault(field, []).append(msg) #errors[field] = msg
        return jsonify({"status": False, "detail": errors}), 400
    except BadRequest as e:
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏£‡∏ì‡∏µ input ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô a)
        return jsonify({
            "status": False,
            "error": "Invalid JSON format",
            "detail": str(e)
        }), 400
    except Exception as e:
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (‡∏°‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ x ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•)
        return jsonify({"status": False, "error": str(e)}), 500
 
# -----------------------------
# üîπ Run API server
# -----------------------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000, debug=True)